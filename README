IPv6 functions for MySQL
------------------------

This is an experimental runtime plug-in (UDF) for MySQL
that adds some basic IPv6 functions that MySQL v5 is still lacking:
inet_ntop(3) and inet_pton(3).

These files are experimental and provided as-is under a EUPL license.

Pieter Ennes (pieter@watchmouse.com)

Copyright ©2009-2010 WatchMouse


LICENSE
-------

Licensed under the EUPL, Version 1.1 or – as soon they will be approved
by the European Commission - subsequent versions of the EUPL (the "Licence");
You may not use this work except in compliance with the Licence. You may
obtain a copy of the Licence at:

   http://ec.europa.eu/idabc/eupl

Unless required by applicable law or agreed to in writing, software
distributed under the Licence is distributed on an "AS IS" basis,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the Licence for the specific language governing permissions and
limitations under the Licence.


DISCLAIMER
----------

These plug-ins should be considered alpha quality at best. The install instructions are only for
Debian GNU/Linux (etch/lenny) or derivatives at the moment.


INSTALLATION
------------

Install required compile time dependencies, on Debian you probably catch most of them with:

    $ apt-get install libmysqlclient-dev

Compile the UDF:

    $ wget http://labs.watchmouse.com/mysql-udf-ipv6-latest.tar.gz
    $ tar xvfz mysql-udf-ipv6-latest.tar.gz
    $ cd mysql-udf-ipv6-[version]
    $ make

Install the shared object in your library search path:

    $ sudo make install

Note that the plug-in install path has changed around MySQL version 5.0.67, make sure to select the correct path in the Makefile.


USAGE
-----

mysql> CREATE FUNCTION inet6_ntop RETURNS STRING SONAME "mysql_udf_ipv6.so";
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE FUNCTION inet6_pton RETURNS STRING SONAME "mysql_udf_ipv6.so";
Query OK, 0 rows affected (0.00 sec)

mysql> CREATE FUNCTION inet6_lookup RETURNS STRING SONAME "mysql_udf_ipv6.so";
Query OK, 0 rows affected (0.00 sec)

mysql> CREATE FUNCTION inet6_rlookup RETURNS STRING SONAME "mysql_udf_ipv6.so";
Query OK, 0 rows affected (0.00 sec)

Unload them with:
mysql> drop function inet6_rlookup; drop function inet6_lookup; drop function inet6_pton; drop function inet6_ntop;


EXAMPLES
--------

Notation conversion functions:

mysql> select inet6_ntop(inet6_pton('2001:4860:a005::68')), inet6_ntop(inet6_pton('1.2.3.4'));
+----------------------------------------------+-----------------------------------+
| inet6_ntop(inet6_pton('2001:4860:a005::68')) | inet6_ntop(inet6_pton('1.2.3.4')) |
+----------------------------------------------+-----------------------------------+
| 2001:4860:a005::68                           | 1.2.3.4                           | 
+----------------------------------------------+-----------------------------------+
1 row in set (0.00 sec)

mysql> select length(inet6_pton('2001:4860:a005::68')), length(inet6_pton('1.2.3.4'));
+------------------------------------------+-------------------------------+
| length(inet6_pton('2001:4860:a005::68')) | length(inet6_pton('1.2.3.4')) |
+------------------------------------------+-------------------------------+
|                                       16 |                             4 | 
+------------------------------------------+-------------------------------+
1 row in set (0.00 sec)

You can neatly store the output of inet6_pton() in a VARBINARY(16) column.

Mask function:

mysql> select inet6_ntop(inet6_mask(inet6_pton('192.0.2.123'), 24)) as 24bit,
              inet6_ntop(inet6_mask(inet6_pton('2001:db8:1234::1234'), 64)) as 64bit;
+-----------+-----------------+
| 24bit     | 64bit           |
+-----------+-----------------+
| 192.0.2.0 | 2001:db8:1234:: | 
+-----------+-----------------+
1 row in set (0.00 sec)

mysql> select inet6_mask(inet6_pton('2001:db8:1::1'), 64) = inet6_mask(inet6_pton('2001:db8:1::2'), 64) as samenet;
+---------+
| samenet |
+---------+
|       1 | 
+---------+
1 row in set (0.00 sec)

mysql> select inet6_mask(inet6_pton('2001:db8:1::1'), 64) = inet6_mask(inet6_pton('2001:db8:2::2'), 64) as samenet;
+---------+
| samenet |
+---------+
|       0 | 
+---------+
1 row in set (0.00 sec)


Lookup functions:

mysql> select inet6_lookup('www.watchmouse.com');
+------------------------------------+
| inet6_lookup('www.watchmouse.com') |
+------------------------------------+
| 2001:1938:80:73::2                 | 
+------------------------------------+
1 row in set (2.08 sec)

mysql> select inet6_rlookup('2a02:f8::ffff:ffe5'), inet6_rlookup('64.128.190.61');
+-------------------------------------+--------------------------------+
| inet6_rlookup('2a02:f8::ffff:ffe5') | inet6_rlookup('64.128.190.61') |
+-------------------------------------+--------------------------------+
| it.watchmouse.com                   | ny.watchmouse.com              | 
+-------------------------------------+--------------------------------+
1 row in set (0.07 sec)

mysql> select inet6_rlookup(inet6_pton('2a02:f8::ffff:ffe5')), inet6_rlookup(inet6_pton('64.128.190.61'));
+-------------------------------------------------+--------------------------------------------+
| inet6_rlookup(inet6_pton('2a02:f8::ffff:ffe5')) | inet6_rlookup(inet6_pton('64.128.190.61')) |
+-------------------------------------------------+--------------------------------------------+
| it.watchmouse.com                               | ny.watchmouse.com                          | 
+-------------------------------------------------+--------------------------------------------+
1 row in set (0.04 sec)

Don't push too many rows through the lookup function, as each lookup may take many seconds to complete.